from huobi.constant.result import OutputKey
from huobi.impl.utils.channelparser import ChannelParser
from huobi.impl.utils.timeservice import convert_cst_in_millisecond_to_utc
from huobi.model import *
from huobi.model.pricedepthbbo import PriceDepthBbo


class PriceDepthBboEvent:
    """
    The price depth received by subscription of price depth.

    :member
        symbol: The symbol you subscribed.
        timestamp: The UNIX formatted timestamp generated by server in UTC.
        data: The price depth.

    """

    def __init__(self):
        self.symbol = ""
        self.timestamp = 0
        self.ch = ""
        self.data = PriceDepthBbo()

    @staticmethod
    def json_parse(json_wrapper):
        ch = json_wrapper.get_string(OutputKey.KeyChannelCh)
        parse = ChannelParser(ch)
        price_depth_event = PriceDepthBboEvent()
        price_depth_event.symbol = parse.symbol
        price_depth_event.timestamp = convert_cst_in_millisecond_to_utc(json_wrapper.get_int("ts"))
        price_depth_event.ch = ch
        data = json_wrapper.get_object(OutputKey.KeyTick)
        price_depth = PriceDepthBbo.json_parse(data)
        price_depth_event.data = price_depth
        return price_depth_event
